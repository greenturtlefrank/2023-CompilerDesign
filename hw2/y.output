Nonterminals useless in grammar

    type_scalar
    type_array
    type_func
    type_func_def


Terminals unused in grammar

    STRUCT


Rules useless in grammar

   96 type_scalar: TYPE

   97 type_array: TYPE

   98 type_func: TYPE

   99 type_func_def: TYPE


Grammar

    0 $accept: start $end

    1 start: first

    2 first: scalar_decl
    3      | array_decl
    4      | func_decl
    5      | func_def

    6 scalar_decl: type ident ';'

    7 type: TYPE

    8 ident: var ident_plus

    9 ident_plus: %empty
   10           | ',' var ident_plus
   11           | ',' type ident

   12 var: VAR scalar_plus
   13    | '*' VAR scalar_plus

   14 scalar_plus: %empty
   15            | '=' expr

   16 array_decl: type array array_more ';'

   17 array: var '[' expr ']' array_plus

   18 array_plus: array_plusplus
   19           | '[' expr ']' array_plus

   20 array_plusplus: %empty
   21               | '=' '{' array_plusplusplus '}'

   22 array_plusplusplus: %empty
   23                   | '{' array_plusplusplus '}' array_plusplusplus
   24                   | ',' array_plusplusplus
   25                   | array_num

   26 array_num: expr array_numplus

   27 array_numplus: %empty
   28              | ',' expr array_numplus

   29 array_more: %empty
   30           | ',' array array_more

   31 func_decl: type func_decl_plus ';'

   32 func_decl_plus: ident '(' parameter ')'

   33 parameter: %empty
   34          | type ident

   35 func_def: type func_def_plus

   36 func_def_plus: ident '(' parameter ')' compound_stmt

   37 expr: term

   38 term: mul term_plus

   39 term_plus: %empty
   40          | '+' mul term_plus
   41          | '-' mul term_plus

   42 mul: otherid mul_plus
   43    | '+' factor
   44    | '-' factor

   45 mul_plus: %empty
   46         | '*' otherid mul_plus
   47         | '/' otherid mul_plus

   48 otherid: power otherid_plus

   49 otherid_plus: %empty
   50             | ID power otherid_plus

   51 power: factor
   52      | PMID

   53 factor: NUM
   54       | FLOAT
   55       | NU
   56       | '(' expr ')'

   57 stmt: stmt_plus

   58 stmt_plus: expr ';'
   59          | ifelse
   60          | switch
   61          | while
   62          | for
   63          | return
   64          | compound_stmt

   65 ifelse: IF '(' expr ')' compound_stmt ifelse_plus

   66 ifelse_plus: %empty
   67            | ELSE compound_stmt

   68 switch: SWITCH '(' expr ')' '{' switch_clauses '}'

   69 switch_clauses: switch_clauses_plus switch_clauses_space

   70 switch_clauses_space: %empty
   71                     | switch_clauses_plus switch_clauses_space
   72                     | ' ' switch_clauses_plus switch_clauses_space
   73                     | '\t' switch_clauses_plus switch_clauses_space
   74                     | '\n' switch_clauses_plus switch_clauses_space

   75 switch_clauses_plus: CASE expr ':' switch_clauses_plusplus
   76                    | DEFAULT ':' switch_clauses_plusplus

   77 switch_clauses_plusplus: %empty
   78                        | stmt switch_clauses_plusplus

   79 while: WHILE '(' expr ')' stmt
   80      | DO stmt WHILE '(' expr ')' ';'

   81 for: FOR '(' nullexpr ';' nullexpr ';' nullexpr ')' stmt

   82 nullexpr: %empty
   83         | expr

   84 return: RETURN return_plus
   85       | BREAK ';'
   86       | CONTINUE ';'

   87 return_plus: expr ';'
   88            | ';'

   89 compound_stmt: '{' compound_stmt_plus '}'

   90 compound_stmt_plus: %empty
   91                   | stmt compound_stmt_plus
   92                   | var_decl compound_stmt_plus

   93 var_decl: scalar_decl
   94         | array_decl
   95         | func_decl


Terminals, with rules where they appear

    $end (0) 0
    '\t' (9) 73
    '\n' (10) 74
    ' ' (32) 72
    '(' (40) 32 36 56 65 68 79 80 81
    ')' (41) 32 36 56 65 68 79 80 81
    '*' (42) 13 46
    '+' (43) 40 43
    ',' (44) 10 11 24 28 30
    '-' (45) 41 44
    '/' (47) 47
    ':' (58) 75 76
    ';' (59) 6 16 31 58 80 81 85 86 87 88
    '=' (61) 15 21
    '[' (91) 17 19
    ']' (93) 17 19
    '{' (123) 21 23 68 89
    '}' (125) 21 23 68 89
    error (256)
    NUM <intVal> (258) 53
    FLOAT <float> (259) 54
    TYPE <var> (260) 7
    ID <var> (261) 50
    PMID <var> (262) 52
    NU <var> (263) 55
    VAR <var> (264) 12 13
    FOR <var> (265) 81
    DO <var> (266) 80
    WHILE <var> (267) 79 80
    BREAK <var> (268) 85
    CONTINUE <var> (269) 86
    IF <var> (270) 65
    ELSE <var> (271) 67
    RETURN <var> (272) 84
    STRUCT <var> (273)
    SWITCH <var> (274) 68
    CASE <var> (275) 75
    DEFAULT <var> (276) 76


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    start (40)
        on left: 1
        on right: 0
    first (41)
        on left: 2 3 4 5
        on right: 1
    scalar_decl (42)
        on left: 6
        on right: 2 93
    type (43)
        on left: 7
        on right: 6 11 16 31 34 35
    ident (44)
        on left: 8
        on right: 6 11 32 34 36
    ident_plus (45)
        on left: 9 10 11
        on right: 8 10
    var (46)
        on left: 12 13
        on right: 8 10 17
    scalar_plus (47)
        on left: 14 15
        on right: 12 13
    array_decl (48)
        on left: 16
        on right: 3 94
    array (49)
        on left: 17
        on right: 16 30
    array_plus (50)
        on left: 18 19
        on right: 17 19
    array_plusplus (51)
        on left: 20 21
        on right: 18
    array_plusplusplus (52)
        on left: 22 23 24 25
        on right: 21 23 24
    array_num (53)
        on left: 26
        on right: 25
    array_numplus (54)
        on left: 27 28
        on right: 26 28
    array_more (55)
        on left: 29 30
        on right: 16 30
    func_decl (56)
        on left: 31
        on right: 4 95
    func_decl_plus (57)
        on left: 32
        on right: 31
    parameter (58)
        on left: 33 34
        on right: 32 36
    func_def (59)
        on left: 35
        on right: 5
    func_def_plus (60)
        on left: 36
        on right: 35
    expr (61)
        on left: 37
        on right: 15 17 19 26 28 56 58 65 68 75 79 80 83 87
    term (62)
        on left: 38
        on right: 37
    term_plus (63)
        on left: 39 40 41
        on right: 38 40 41
    mul (64)
        on left: 42 43 44
        on right: 38 40 41
    mul_plus (65)
        on left: 45 46 47
        on right: 42 46 47
    otherid (66)
        on left: 48
        on right: 42 46 47
    otherid_plus (67)
        on left: 49 50
        on right: 48 50
    power (68)
        on left: 51 52
        on right: 48 50
    factor (69)
        on left: 53 54 55 56
        on right: 43 44 51
    stmt (70)
        on left: 57
        on right: 78 79 80 81 91
    stmt_plus (71)
        on left: 58 59 60 61 62 63 64
        on right: 57
    ifelse (72)
        on left: 65
        on right: 59
    ifelse_plus (73)
        on left: 66 67
        on right: 65
    switch (74)
        on left: 68
        on right: 60
    switch_clauses (75)
        on left: 69
        on right: 68
    switch_clauses_space (76)
        on left: 70 71 72 73 74
        on right: 69 71 72 73 74
    switch_clauses_plus (77)
        on left: 75 76
        on right: 69 71 72 73 74
    switch_clauses_plusplus (78)
        on left: 77 78
        on right: 75 76 78
    while (79)
        on left: 79 80
        on right: 61
    for (80)
        on left: 81
        on right: 62
    nullexpr (81)
        on left: 82 83
        on right: 81
    return (82)
        on left: 84 85 86
        on right: 63
    return_plus (83)
        on left: 87 88
        on right: 84
    compound_stmt (84)
        on left: 89
        on right: 36 64 65 67
    compound_stmt_plus (85)
        on left: 90 91 92
        on right: 89 91 92
    var_decl (86)
        on left: 93 94 95
        on right: 92


State 0

    0 $accept: . start $end

    TYPE  shift, and go to state 1

    start        go to state 2
    first        go to state 3
    scalar_decl  go to state 4
    type         go to state 5
    array_decl   go to state 6
    func_decl    go to state 7
    func_def     go to state 8


State 1

    7 type: TYPE .

    $default  reduce using rule 7 (type)


State 2

    0 $accept: start . $end

    $end  shift, and go to state 9


State 3

    1 start: first .

    $default  reduce using rule 1 (start)


State 4

    2 first: scalar_decl .

    $default  reduce using rule 2 (first)


State 5

    6 scalar_decl: type . ident ';'
   16 array_decl: type . array array_more ';'
   31 func_decl: type . func_decl_plus ';'
   35 func_def: type . func_def_plus

    VAR  shift, and go to state 10
    '*'  shift, and go to state 11

    ident           go to state 12
    var             go to state 13
    array           go to state 14
    func_decl_plus  go to state 15
    func_def_plus   go to state 16


State 6

    3 first: array_decl .

    $default  reduce using rule 3 (first)


State 7

    4 first: func_decl .

    $default  reduce using rule 4 (first)


State 8

    5 first: func_def .

    $default  reduce using rule 5 (first)


State 9

    0 $accept: start $end .

    $default  accept


State 10

   12 var: VAR . scalar_plus

    '='  shift, and go to state 17

    $default  reduce using rule 14 (scalar_plus)

    scalar_plus  go to state 18


State 11

   13 var: '*' . VAR scalar_plus

    VAR  shift, and go to state 19


State 12

    6 scalar_decl: type ident . ';'
   32 func_decl_plus: ident . '(' parameter ')'
   36 func_def_plus: ident . '(' parameter ')' compound_stmt

    ';'  shift, and go to state 20
    '('  shift, and go to state 21


State 13

    8 ident: var . ident_plus
   17 array: var . '[' expr ']' array_plus

    ','  shift, and go to state 22
    '['  shift, and go to state 23

    $default  reduce using rule 9 (ident_plus)

    ident_plus  go to state 24


State 14

   16 array_decl: type array . array_more ';'

    ','  shift, and go to state 25

    $default  reduce using rule 29 (array_more)

    array_more  go to state 26


State 15

   31 func_decl: type func_decl_plus . ';'

    ';'  shift, and go to state 27


State 16

   35 func_def: type func_def_plus .

    $default  reduce using rule 35 (func_def)


State 17

   15 scalar_plus: '=' . expr

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 35
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 18

   12 var: VAR scalar_plus .

    $default  reduce using rule 12 (var)


State 19

   13 var: '*' VAR . scalar_plus

    '='  shift, and go to state 17

    $default  reduce using rule 14 (scalar_plus)

    scalar_plus  go to state 41


State 20

    6 scalar_decl: type ident ';' .

    $default  reduce using rule 6 (scalar_decl)


State 21

   32 func_decl_plus: ident '(' . parameter ')'
   36 func_def_plus: ident '(' . parameter ')' compound_stmt

    TYPE  shift, and go to state 1

    $default  reduce using rule 33 (parameter)

    type       go to state 42
    parameter  go to state 43


State 22

   10 ident_plus: ',' . var ident_plus
   11           | ',' . type ident

    TYPE  shift, and go to state 1
    VAR   shift, and go to state 10
    '*'   shift, and go to state 11

    type  go to state 44
    var   go to state 45


State 23

   17 array: var '[' . expr ']' array_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 46
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 24

    8 ident: var ident_plus .

    $default  reduce using rule 8 (ident)


State 25

   30 array_more: ',' . array array_more

    VAR  shift, and go to state 10
    '*'  shift, and go to state 11

    var    go to state 47
    array  go to state 48


State 26

   16 array_decl: type array array_more . ';'

    ';'  shift, and go to state 49


State 27

   31 func_decl: type func_decl_plus ';' .

    $default  reduce using rule 31 (func_decl)


State 28

   53 factor: NUM .

    $default  reduce using rule 53 (factor)


State 29

   54 factor: FLOAT .

    $default  reduce using rule 54 (factor)


State 30

   52 power: PMID .

    $default  reduce using rule 52 (power)


State 31

   55 factor: NU .

    $default  reduce using rule 55 (factor)


State 32

   56 factor: '(' . expr ')'

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 50
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 33

   43 mul: '+' . factor

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    NU     shift, and go to state 31
    '('    shift, and go to state 32

    factor  go to state 51


State 34

   44 mul: '-' . factor

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    NU     shift, and go to state 31
    '('    shift, and go to state 32

    factor  go to state 52


State 35

   15 scalar_plus: '=' expr .

    $default  reduce using rule 15 (scalar_plus)


State 36

   37 expr: term .

    $default  reduce using rule 37 (expr)


State 37

   38 term: mul . term_plus

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54

    $default  reduce using rule 39 (term_plus)

    term_plus  go to state 55


State 38

   42 mul: otherid . mul_plus

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 45 (mul_plus)

    mul_plus  go to state 58


State 39

   48 otherid: power . otherid_plus

    ID  shift, and go to state 59

    $default  reduce using rule 49 (otherid_plus)

    otherid_plus  go to state 60


State 40

   51 power: factor .

    $default  reduce using rule 51 (power)


State 41

   13 var: '*' VAR scalar_plus .

    $default  reduce using rule 13 (var)


State 42

   34 parameter: type . ident

    VAR  shift, and go to state 10
    '*'  shift, and go to state 11

    ident  go to state 61
    var    go to state 62


State 43

   32 func_decl_plus: ident '(' parameter . ')'
   36 func_def_plus: ident '(' parameter . ')' compound_stmt

    ')'  shift, and go to state 63


State 44

   11 ident_plus: ',' type . ident

    VAR  shift, and go to state 10
    '*'  shift, and go to state 11

    ident  go to state 64
    var    go to state 62


State 45

   10 ident_plus: ',' var . ident_plus

    ','  shift, and go to state 22

    $default  reduce using rule 9 (ident_plus)

    ident_plus  go to state 65


State 46

   17 array: var '[' expr . ']' array_plus

    ']'  shift, and go to state 66


State 47

   17 array: var . '[' expr ']' array_plus

    '['  shift, and go to state 23


State 48

   30 array_more: ',' array . array_more

    ','  shift, and go to state 25

    $default  reduce using rule 29 (array_more)

    array_more  go to state 67


State 49

   16 array_decl: type array array_more ';' .

    $default  reduce using rule 16 (array_decl)


State 50

   56 factor: '(' expr . ')'

    ')'  shift, and go to state 68


State 51

   43 mul: '+' factor .

    $default  reduce using rule 43 (mul)


State 52

   44 mul: '-' factor .

    $default  reduce using rule 44 (mul)


State 53

   40 term_plus: '+' . mul term_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    mul      go to state 69
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 54

   41 term_plus: '-' . mul term_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    mul      go to state 70
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 55

   38 term: mul term_plus .

    $default  reduce using rule 38 (term)


State 56

   46 mul_plus: '*' . otherid mul_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32

    otherid  go to state 71
    power    go to state 39
    factor   go to state 40


State 57

   47 mul_plus: '/' . otherid mul_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32

    otherid  go to state 72
    power    go to state 39
    factor   go to state 40


State 58

   42 mul: otherid mul_plus .

    $default  reduce using rule 42 (mul)


State 59

   50 otherid_plus: ID . power otherid_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32

    power   go to state 73
    factor  go to state 40


State 60

   48 otherid: power otherid_plus .

    $default  reduce using rule 48 (otherid)


State 61

   34 parameter: type ident .

    $default  reduce using rule 34 (parameter)


State 62

    8 ident: var . ident_plus

    ','  shift, and go to state 22

    $default  reduce using rule 9 (ident_plus)

    ident_plus  go to state 24


State 63

   32 func_decl_plus: ident '(' parameter ')' .
   36 func_def_plus: ident '(' parameter ')' . compound_stmt

    '{'  shift, and go to state 74

    $default  reduce using rule 32 (func_decl_plus)

    compound_stmt  go to state 75


State 64

   11 ident_plus: ',' type ident .

    $default  reduce using rule 11 (ident_plus)


State 65

   10 ident_plus: ',' var ident_plus .

    $default  reduce using rule 10 (ident_plus)


State 66

   17 array: var '[' expr ']' . array_plus

    '='  shift, and go to state 76
    '['  shift, and go to state 77

    $default  reduce using rule 20 (array_plusplus)

    array_plus      go to state 78
    array_plusplus  go to state 79


State 67

   30 array_more: ',' array array_more .

    $default  reduce using rule 30 (array_more)


State 68

   56 factor: '(' expr ')' .

    $default  reduce using rule 56 (factor)


State 69

   40 term_plus: '+' mul . term_plus

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54

    $default  reduce using rule 39 (term_plus)

    term_plus  go to state 80


State 70

   41 term_plus: '-' mul . term_plus

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54

    $default  reduce using rule 39 (term_plus)

    term_plus  go to state 81


State 71

   46 mul_plus: '*' otherid . mul_plus

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 45 (mul_plus)

    mul_plus  go to state 82


State 72

   47 mul_plus: '/' otherid . mul_plus

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 45 (mul_plus)

    mul_plus  go to state 83


State 73

   50 otherid_plus: ID power . otherid_plus

    ID  shift, and go to state 59

    $default  reduce using rule 49 (otherid_plus)

    otherid_plus  go to state 84


State 74

   89 compound_stmt: '{' . compound_stmt_plus '}'

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    TYPE      shift, and go to state 1
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 90 (compound_stmt_plus)

    scalar_decl         go to state 93
    type                go to state 94
    array_decl          go to state 95
    func_decl           go to state 96
    expr                go to state 97
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40
    stmt                go to state 98
    stmt_plus           go to state 99
    ifelse              go to state 100
    switch              go to state 101
    while               go to state 102
    for                 go to state 103
    return              go to state 104
    compound_stmt       go to state 105
    compound_stmt_plus  go to state 106
    var_decl            go to state 107


State 75

   36 func_def_plus: ident '(' parameter ')' compound_stmt .

    $default  reduce using rule 36 (func_def_plus)


State 76

   21 array_plusplus: '=' . '{' array_plusplusplus '}'

    '{'  shift, and go to state 108


State 77

   19 array_plus: '[' . expr ']' array_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 109
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 78

   17 array: var '[' expr ']' array_plus .

    $default  reduce using rule 17 (array)


State 79

   18 array_plus: array_plusplus .

    $default  reduce using rule 18 (array_plus)


State 80

   40 term_plus: '+' mul term_plus .

    $default  reduce using rule 40 (term_plus)


State 81

   41 term_plus: '-' mul term_plus .

    $default  reduce using rule 41 (term_plus)


State 82

   46 mul_plus: '*' otherid mul_plus .

    $default  reduce using rule 46 (mul_plus)


State 83

   47 mul_plus: '/' otherid mul_plus .

    $default  reduce using rule 47 (mul_plus)


State 84

   50 otherid_plus: ID power otherid_plus .

    $default  reduce using rule 50 (otherid_plus)


State 85

   81 for: FOR . '(' nullexpr ';' nullexpr ';' nullexpr ')' stmt

    '('  shift, and go to state 110


State 86

   80 while: DO . stmt WHILE '(' expr ')' ';'

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    expr           go to state 97
    term           go to state 36
    mul            go to state 37
    otherid        go to state 38
    power          go to state 39
    factor         go to state 40
    stmt           go to state 111
    stmt_plus      go to state 99
    ifelse         go to state 100
    switch         go to state 101
    while          go to state 102
    for            go to state 103
    return         go to state 104
    compound_stmt  go to state 105


State 87

   79 while: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 112


State 88

   85 return: BREAK . ';'

    ';'  shift, and go to state 113


State 89

   86 return: CONTINUE . ';'

    ';'  shift, and go to state 114


State 90

   65 ifelse: IF . '(' expr ')' compound_stmt ifelse_plus

    '('  shift, and go to state 115


State 91

   84 return: RETURN . return_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    ';'    shift, and go to state 116
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr         go to state 117
    term         go to state 36
    mul          go to state 37
    otherid      go to state 38
    power        go to state 39
    factor       go to state 40
    return_plus  go to state 118


State 92

   68 switch: SWITCH . '(' expr ')' '{' switch_clauses '}'

    '('  shift, and go to state 119


State 93

   93 var_decl: scalar_decl .

    $default  reduce using rule 93 (var_decl)


State 94

    6 scalar_decl: type . ident ';'
   16 array_decl: type . array array_more ';'
   31 func_decl: type . func_decl_plus ';'

    VAR  shift, and go to state 10
    '*'  shift, and go to state 11

    ident           go to state 120
    var             go to state 13
    array           go to state 14
    func_decl_plus  go to state 15


State 95

   94 var_decl: array_decl .

    $default  reduce using rule 94 (var_decl)


State 96

   95 var_decl: func_decl .

    $default  reduce using rule 95 (var_decl)


State 97

   58 stmt_plus: expr . ';'

    ';'  shift, and go to state 121


State 98

   91 compound_stmt_plus: stmt . compound_stmt_plus

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    TYPE      shift, and go to state 1
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 90 (compound_stmt_plus)

    scalar_decl         go to state 93
    type                go to state 94
    array_decl          go to state 95
    func_decl           go to state 96
    expr                go to state 97
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40
    stmt                go to state 98
    stmt_plus           go to state 99
    ifelse              go to state 100
    switch              go to state 101
    while               go to state 102
    for                 go to state 103
    return              go to state 104
    compound_stmt       go to state 105
    compound_stmt_plus  go to state 122
    var_decl            go to state 107


State 99

   57 stmt: stmt_plus .

    $default  reduce using rule 57 (stmt)


State 100

   59 stmt_plus: ifelse .

    $default  reduce using rule 59 (stmt_plus)


State 101

   60 stmt_plus: switch .

    $default  reduce using rule 60 (stmt_plus)


State 102

   61 stmt_plus: while .

    $default  reduce using rule 61 (stmt_plus)


State 103

   62 stmt_plus: for .

    $default  reduce using rule 62 (stmt_plus)


State 104

   63 stmt_plus: return .

    $default  reduce using rule 63 (stmt_plus)


State 105

   64 stmt_plus: compound_stmt .

    $default  reduce using rule 64 (stmt_plus)


State 106

   89 compound_stmt: '{' compound_stmt_plus . '}'

    '}'  shift, and go to state 123


State 107

   92 compound_stmt_plus: var_decl . compound_stmt_plus

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    TYPE      shift, and go to state 1
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 90 (compound_stmt_plus)

    scalar_decl         go to state 93
    type                go to state 94
    array_decl          go to state 95
    func_decl           go to state 96
    expr                go to state 97
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40
    stmt                go to state 98
    stmt_plus           go to state 99
    ifelse              go to state 100
    switch              go to state 101
    while               go to state 102
    for                 go to state 103
    return              go to state 104
    compound_stmt       go to state 105
    compound_stmt_plus  go to state 124
    var_decl            go to state 107


State 108

   21 array_plusplus: '=' '{' . array_plusplusplus '}'

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    ','    shift, and go to state 125
    '{'    shift, and go to state 126
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 22 (array_plusplusplus)

    array_plusplusplus  go to state 127
    array_num           go to state 128
    expr                go to state 129
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40


State 109

   19 array_plus: '[' expr . ']' array_plus

    ']'  shift, and go to state 130


State 110

   81 for: FOR '(' . nullexpr ';' nullexpr ';' nullexpr ')' stmt

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 82 (nullexpr)

    expr      go to state 131
    term      go to state 36
    mul       go to state 37
    otherid   go to state 38
    power     go to state 39
    factor    go to state 40
    nullexpr  go to state 132


State 111

   80 while: DO stmt . WHILE '(' expr ')' ';'

    WHILE  shift, and go to state 133


State 112

   79 while: WHILE '(' . expr ')' stmt

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 134
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 113

   85 return: BREAK ';' .

    $default  reduce using rule 85 (return)


State 114

   86 return: CONTINUE ';' .

    $default  reduce using rule 86 (return)


State 115

   65 ifelse: IF '(' . expr ')' compound_stmt ifelse_plus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 135
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 116

   88 return_plus: ';' .

    $default  reduce using rule 88 (return_plus)


State 117

   87 return_plus: expr . ';'

    ';'  shift, and go to state 136


State 118

   84 return: RETURN return_plus .

    $default  reduce using rule 84 (return)


State 119

   68 switch: SWITCH '(' . expr ')' '{' switch_clauses '}'

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 137
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 120

    6 scalar_decl: type ident . ';'
   32 func_decl_plus: ident . '(' parameter ')'

    ';'  shift, and go to state 20
    '('  shift, and go to state 138


State 121

   58 stmt_plus: expr ';' .

    $default  reduce using rule 58 (stmt_plus)


State 122

   91 compound_stmt_plus: stmt compound_stmt_plus .

    $default  reduce using rule 91 (compound_stmt_plus)


State 123

   89 compound_stmt: '{' compound_stmt_plus '}' .

    $default  reduce using rule 89 (compound_stmt)


State 124

   92 compound_stmt_plus: var_decl compound_stmt_plus .

    $default  reduce using rule 92 (compound_stmt_plus)


State 125

   24 array_plusplusplus: ',' . array_plusplusplus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    ','    shift, and go to state 125
    '{'    shift, and go to state 126
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 22 (array_plusplusplus)

    array_plusplusplus  go to state 139
    array_num           go to state 128
    expr                go to state 129
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40


State 126

   23 array_plusplusplus: '{' . array_plusplusplus '}' array_plusplusplus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    ','    shift, and go to state 125
    '{'    shift, and go to state 126
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 22 (array_plusplusplus)

    array_plusplusplus  go to state 140
    array_num           go to state 128
    expr                go to state 129
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40


State 127

   21 array_plusplus: '=' '{' array_plusplusplus . '}'

    '}'  shift, and go to state 141


State 128

   25 array_plusplusplus: array_num .

    $default  reduce using rule 25 (array_plusplusplus)


State 129

   26 array_num: expr . array_numplus

    ','  shift, and go to state 142

    $default  reduce using rule 27 (array_numplus)

    array_numplus  go to state 143


State 130

   19 array_plus: '[' expr ']' . array_plus

    '='  shift, and go to state 76
    '['  shift, and go to state 77

    $default  reduce using rule 20 (array_plusplus)

    array_plus      go to state 144
    array_plusplus  go to state 79


State 131

   83 nullexpr: expr .

    $default  reduce using rule 83 (nullexpr)


State 132

   81 for: FOR '(' nullexpr . ';' nullexpr ';' nullexpr ')' stmt

    ';'  shift, and go to state 145


State 133

   80 while: DO stmt WHILE . '(' expr ')' ';'

    '('  shift, and go to state 146


State 134

   79 while: WHILE '(' expr . ')' stmt

    ')'  shift, and go to state 147


State 135

   65 ifelse: IF '(' expr . ')' compound_stmt ifelse_plus

    ')'  shift, and go to state 148


State 136

   87 return_plus: expr ';' .

    $default  reduce using rule 87 (return_plus)


State 137

   68 switch: SWITCH '(' expr . ')' '{' switch_clauses '}'

    ')'  shift, and go to state 149


State 138

   32 func_decl_plus: ident '(' . parameter ')'

    TYPE  shift, and go to state 1

    $default  reduce using rule 33 (parameter)

    type       go to state 42
    parameter  go to state 150


State 139

   24 array_plusplusplus: ',' array_plusplusplus .

    $default  reduce using rule 24 (array_plusplusplus)


State 140

   23 array_plusplusplus: '{' array_plusplusplus . '}' array_plusplusplus

    '}'  shift, and go to state 151


State 141

   21 array_plusplus: '=' '{' array_plusplusplus '}' .

    $default  reduce using rule 21 (array_plusplus)


State 142

   28 array_numplus: ',' . expr array_numplus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 152
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 143

   26 array_num: expr array_numplus .

    $default  reduce using rule 26 (array_num)


State 144

   19 array_plus: '[' expr ']' array_plus .

    $default  reduce using rule 19 (array_plus)


State 145

   81 for: FOR '(' nullexpr ';' . nullexpr ';' nullexpr ')' stmt

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 82 (nullexpr)

    expr      go to state 131
    term      go to state 36
    mul       go to state 37
    otherid   go to state 38
    power     go to state 39
    factor    go to state 40
    nullexpr  go to state 153


State 146

   80 while: DO stmt WHILE '(' . expr ')' ';'

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 154
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 147

   79 while: WHILE '(' expr ')' . stmt

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    expr           go to state 97
    term           go to state 36
    mul            go to state 37
    otherid        go to state 38
    power          go to state 39
    factor         go to state 40
    stmt           go to state 155
    stmt_plus      go to state 99
    ifelse         go to state 100
    switch         go to state 101
    while          go to state 102
    for            go to state 103
    return         go to state 104
    compound_stmt  go to state 105


State 148

   65 ifelse: IF '(' expr ')' . compound_stmt ifelse_plus

    '{'  shift, and go to state 74

    compound_stmt  go to state 156


State 149

   68 switch: SWITCH '(' expr ')' . '{' switch_clauses '}'

    '{'  shift, and go to state 157


State 150

   32 func_decl_plus: ident '(' parameter . ')'

    ')'  shift, and go to state 158


State 151

   23 array_plusplusplus: '{' array_plusplusplus '}' . array_plusplusplus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    ','    shift, and go to state 125
    '{'    shift, and go to state 126
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 22 (array_plusplusplus)

    array_plusplusplus  go to state 159
    array_num           go to state 128
    expr                go to state 129
    term                go to state 36
    mul                 go to state 37
    otherid             go to state 38
    power               go to state 39
    factor              go to state 40


State 152

   28 array_numplus: ',' expr . array_numplus

    ','  shift, and go to state 142

    $default  reduce using rule 27 (array_numplus)

    array_numplus  go to state 160


State 153

   81 for: FOR '(' nullexpr ';' nullexpr . ';' nullexpr ')' stmt

    ';'  shift, and go to state 161


State 154

   80 while: DO stmt WHILE '(' expr . ')' ';'

    ')'  shift, and go to state 162


State 155

   79 while: WHILE '(' expr ')' stmt .

    $default  reduce using rule 79 (while)


State 156

   65 ifelse: IF '(' expr ')' compound_stmt . ifelse_plus

    ELSE  shift, and go to state 163

    $default  reduce using rule 66 (ifelse_plus)

    ifelse_plus  go to state 164


State 157

   68 switch: SWITCH '(' expr ')' '{' . switch_clauses '}'

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166

    switch_clauses       go to state 167
    switch_clauses_plus  go to state 168


State 158

   32 func_decl_plus: ident '(' parameter ')' .

    $default  reduce using rule 32 (func_decl_plus)


State 159

   23 array_plusplusplus: '{' array_plusplusplus '}' array_plusplusplus .

    $default  reduce using rule 23 (array_plusplusplus)


State 160

   28 array_numplus: ',' expr array_numplus .

    $default  reduce using rule 28 (array_numplus)


State 161

   81 for: FOR '(' nullexpr ';' nullexpr ';' . nullexpr ')' stmt

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    $default  reduce using rule 82 (nullexpr)

    expr      go to state 131
    term      go to state 36
    mul       go to state 37
    otherid   go to state 38
    power     go to state 39
    factor    go to state 40
    nullexpr  go to state 169


State 162

   80 while: DO stmt WHILE '(' expr ')' . ';'

    ';'  shift, and go to state 170


State 163

   67 ifelse_plus: ELSE . compound_stmt

    '{'  shift, and go to state 74

    compound_stmt  go to state 171


State 164

   65 ifelse: IF '(' expr ')' compound_stmt ifelse_plus .

    $default  reduce using rule 65 (ifelse)


State 165

   75 switch_clauses_plus: CASE . expr ':' switch_clauses_plusplus

    NUM    shift, and go to state 28
    FLOAT  shift, and go to state 29
    PMID   shift, and go to state 30
    NU     shift, and go to state 31
    '('    shift, and go to state 32
    '+'    shift, and go to state 33
    '-'    shift, and go to state 34

    expr     go to state 172
    term     go to state 36
    mul      go to state 37
    otherid  go to state 38
    power    go to state 39
    factor   go to state 40


State 166

   76 switch_clauses_plus: DEFAULT . ':' switch_clauses_plusplus

    ':'  shift, and go to state 173


State 167

   68 switch: SWITCH '(' expr ')' '{' switch_clauses . '}'

    '}'  shift, and go to state 174


State 168

   69 switch_clauses: switch_clauses_plus . switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166
    ' '      shift, and go to state 175
    '\t'     shift, and go to state 176
    '\n'     shift, and go to state 177

    $default  reduce using rule 70 (switch_clauses_space)

    switch_clauses_space  go to state 178
    switch_clauses_plus   go to state 179


State 169

   81 for: FOR '(' nullexpr ';' nullexpr ';' nullexpr . ')' stmt

    ')'  shift, and go to state 180


State 170

   80 while: DO stmt WHILE '(' expr ')' ';' .

    $default  reduce using rule 80 (while)


State 171

   67 ifelse_plus: ELSE compound_stmt .

    $default  reduce using rule 67 (ifelse_plus)


State 172

   75 switch_clauses_plus: CASE expr . ':' switch_clauses_plusplus

    ':'  shift, and go to state 181


State 173

   76 switch_clauses_plus: DEFAULT ':' . switch_clauses_plusplus

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 77 (switch_clauses_plusplus)

    expr                     go to state 97
    term                     go to state 36
    mul                      go to state 37
    otherid                  go to state 38
    power                    go to state 39
    factor                   go to state 40
    stmt                     go to state 182
    stmt_plus                go to state 99
    ifelse                   go to state 100
    switch                   go to state 101
    switch_clauses_plusplus  go to state 183
    while                    go to state 102
    for                      go to state 103
    return                   go to state 104
    compound_stmt            go to state 105


State 174

   68 switch: SWITCH '(' expr ')' '{' switch_clauses '}' .

    $default  reduce using rule 68 (switch)


State 175

   72 switch_clauses_space: ' ' . switch_clauses_plus switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166

    switch_clauses_plus  go to state 184


State 176

   73 switch_clauses_space: '\t' . switch_clauses_plus switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166

    switch_clauses_plus  go to state 185


State 177

   74 switch_clauses_space: '\n' . switch_clauses_plus switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166

    switch_clauses_plus  go to state 186


State 178

   69 switch_clauses: switch_clauses_plus switch_clauses_space .

    $default  reduce using rule 69 (switch_clauses)


State 179

   71 switch_clauses_space: switch_clauses_plus . switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166
    ' '      shift, and go to state 175
    '\t'     shift, and go to state 176
    '\n'     shift, and go to state 177

    $default  reduce using rule 70 (switch_clauses_space)

    switch_clauses_space  go to state 187
    switch_clauses_plus   go to state 179


State 180

   81 for: FOR '(' nullexpr ';' nullexpr ';' nullexpr ')' . stmt

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    expr           go to state 97
    term           go to state 36
    mul            go to state 37
    otherid        go to state 38
    power          go to state 39
    factor         go to state 40
    stmt           go to state 188
    stmt_plus      go to state 99
    ifelse         go to state 100
    switch         go to state 101
    while          go to state 102
    for            go to state 103
    return         go to state 104
    compound_stmt  go to state 105


State 181

   75 switch_clauses_plus: CASE expr ':' . switch_clauses_plusplus

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 77 (switch_clauses_plusplus)

    expr                     go to state 97
    term                     go to state 36
    mul                      go to state 37
    otherid                  go to state 38
    power                    go to state 39
    factor                   go to state 40
    stmt                     go to state 182
    stmt_plus                go to state 99
    ifelse                   go to state 100
    switch                   go to state 101
    switch_clauses_plusplus  go to state 189
    while                    go to state 102
    for                      go to state 103
    return                   go to state 104
    compound_stmt            go to state 105


State 182

   78 switch_clauses_plusplus: stmt . switch_clauses_plusplus

    NUM       shift, and go to state 28
    FLOAT     shift, and go to state 29
    PMID      shift, and go to state 30
    NU        shift, and go to state 31
    FOR       shift, and go to state 85
    DO        shift, and go to state 86
    WHILE     shift, and go to state 87
    BREAK     shift, and go to state 88
    CONTINUE  shift, and go to state 89
    IF        shift, and go to state 90
    RETURN    shift, and go to state 91
    SWITCH    shift, and go to state 92
    '{'       shift, and go to state 74
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    $default  reduce using rule 77 (switch_clauses_plusplus)

    expr                     go to state 97
    term                     go to state 36
    mul                      go to state 37
    otherid                  go to state 38
    power                    go to state 39
    factor                   go to state 40
    stmt                     go to state 182
    stmt_plus                go to state 99
    ifelse                   go to state 100
    switch                   go to state 101
    switch_clauses_plusplus  go to state 190
    while                    go to state 102
    for                      go to state 103
    return                   go to state 104
    compound_stmt            go to state 105


State 183

   76 switch_clauses_plus: DEFAULT ':' switch_clauses_plusplus .

    $default  reduce using rule 76 (switch_clauses_plus)


State 184

   72 switch_clauses_space: ' ' switch_clauses_plus . switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166
    ' '      shift, and go to state 175
    '\t'     shift, and go to state 176
    '\n'     shift, and go to state 177

    $default  reduce using rule 70 (switch_clauses_space)

    switch_clauses_space  go to state 191
    switch_clauses_plus   go to state 179


State 185

   73 switch_clauses_space: '\t' switch_clauses_plus . switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166
    ' '      shift, and go to state 175
    '\t'     shift, and go to state 176
    '\n'     shift, and go to state 177

    $default  reduce using rule 70 (switch_clauses_space)

    switch_clauses_space  go to state 192
    switch_clauses_plus   go to state 179


State 186

   74 switch_clauses_space: '\n' switch_clauses_plus . switch_clauses_space

    CASE     shift, and go to state 165
    DEFAULT  shift, and go to state 166
    ' '      shift, and go to state 175
    '\t'     shift, and go to state 176
    '\n'     shift, and go to state 177

    $default  reduce using rule 70 (switch_clauses_space)

    switch_clauses_space  go to state 193
    switch_clauses_plus   go to state 179


State 187

   71 switch_clauses_space: switch_clauses_plus switch_clauses_space .

    $default  reduce using rule 71 (switch_clauses_space)


State 188

   81 for: FOR '(' nullexpr ';' nullexpr ';' nullexpr ')' stmt .

    $default  reduce using rule 81 (for)


State 189

   75 switch_clauses_plus: CASE expr ':' switch_clauses_plusplus .

    $default  reduce using rule 75 (switch_clauses_plus)


State 190

   78 switch_clauses_plusplus: stmt switch_clauses_plusplus .

    $default  reduce using rule 78 (switch_clauses_plusplus)


State 191

   72 switch_clauses_space: ' ' switch_clauses_plus switch_clauses_space .

    $default  reduce using rule 72 (switch_clauses_space)


State 192

   73 switch_clauses_space: '\t' switch_clauses_plus switch_clauses_space .

    $default  reduce using rule 73 (switch_clauses_space)


State 193

   74 switch_clauses_space: '\n' switch_clauses_plus switch_clauses_space .

    $default  reduce using rule 74 (switch_clauses_space)
